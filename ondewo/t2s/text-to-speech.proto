// Copyright 2020 ONDEWO GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ondewo.t2s;
import "google/protobuf/empty.proto";

// endpoints of t2s generate service
service Text2Speech {

    // Synthesizes an specific text sent in the request with the configuration requirements and retrieves a response
    // that includes the synthesized text to audio and the configuration wanted.
    rpc Synthesize (SynthesizeRequest) returns (SynthesizeResponse) {
    };
    // Retrieves the configuration of the specified pipeline.
    rpc GetT2sPipeline (T2sPipelineId) returns (Text2SpeechConfig) {
    };
    // Creates a pipeline with the specified configuration and retrieves its id.
    rpc CreateT2sPipeline (Text2SpeechConfig) returns (T2sPipelineId) {
    };
    // Deletes the specified pipeline.
    rpc DeleteT2sPipeline (T2sPipelineId) returns (google.protobuf.Empty) {
    };
    // Update a specified pipeline with certain configuration.
    rpc UpdateT2sPipeline (Text2SpeechConfig) returns (google.protobuf.Empty) {
    };
    // Retrieve the list of pipelines with an specific requirement.
    rpc ListT2sPipelines (ListT2sPipelinesRequest) returns (ListT2sPipelinesResponse) {
    };
    // Retrieve the list of languages given a specific config request.
    rpc ListT2sLanguages (ListT2sLanguagesRequest) returns (ListT2sLanguagesResponse) {
    };
    // Retrieve the list of domains given a specific config request.
    rpc ListT2sDomains (ListT2sDomainsRequest) returns (ListT2sDomainsResponse) {
    };
}

////////////////
// SYNTHESIZE //
////////////////

// Represents a Synthesize Request.
// A Synthesize Request contains the information need to perform a text to speech conversion.
message SynthesizeRequest {
    // Required. Represents the text that will be transformed to speech.
    string text = 1;

    // Required. Represents the specifications needed to do the text to speech transformation.
    RequestConfig config = 2;
}

// Represents a Configuration for the text to speech conversion.
message RequestConfig {

    // Required. Represents the pipeline id of the model configuration that will be used.
    string t2s_pipeline_id = 1;
    // Optional. this parameter defines the speed of the audio. Should not be very much off 1.0
    float length_scale = 2;
    float noise_scale = 3; // can be from 0.0 to 1. Defines the noise in the generated audio
    int32 sample_rate = 4; // by default 22050 sample rate of the generated wav file
    oneof _Pcm {
        Pcm pcm = 5;
    }// pulse-code modulation of the wav file, by default 16
    oneof _AudioFormat {
        AudioFormat audio_format = 6;
    }
    bool use_cache = 7;

}

enum Pcm {
        PCM_16 = 0;
        PCM_24 = 1;
        PCM_32 = 2;
        PCM_S8 = 3;
        PCM_U8 = 4;
        FLOAT = 5;
        DOUBLE = 6;
    }

enum AudioFormat {
        wav = 0;
        flac = 1;
        caf = 2;
        mp3 = 3;
        aac = 4;
        ogg = 5;
        wma = 6;
    }

message SynthesizeResponse {
    bytes audio = 1; // generated wav file with the parameters described in request
    float generation_time = 2;
    float audio_length = 3;
    string text = 6;
    RequestConfig config = 7;
}

////////////////////////
// LIST T2S PIPELINES //
////////////////////////

message ListT2sPipelinesRequest {
    repeated string languages = 1;
    repeated string speaker_sexes = 2;
    repeated string pipeline_owners = 3;
    repeated string speaker_names = 4;
    repeated string domains = 5;
}

message ListT2sPipelinesResponse {
    repeated Text2SpeechConfig pipelines = 1;
}

////////////////////////
// LIST T2S LANGUAGES //
////////////////////////

message ListT2sLanguagesRequest {
    repeated string speaker_sexes = 1;
    repeated string pipeline_owners = 2;
    repeated string speaker_names = 3;
    repeated string domains = 4;
}

message ListT2sLanguagesResponse {
    repeated string languages = 1;
}

//////////////////////
// LIST T2S DOMAINS //
//////////////////////

message ListT2sDomainsRequest {
    repeated string speaker_sexes = 1;
    repeated string pipeline_owners = 2;
    repeated string speaker_names = 3;
    repeated string languages = 4;
}

message ListT2sDomainsResponse {
    repeated string domains = 1;
}

/////////////////////////
// UPDATE T2S PIPELINE //
/////////////////////////

message T2sPipelineId {
    string id = 1; // id of the model that will generate audio
}

///////////////////////////
// Text-to-Speech Config //
///////////////////////////

// configuration of text-to-speech models
message Text2SpeechConfig {
    string id = 1;
    Description description = 3;
    bool active = 4;
    Inference inference = 5;
    Normalization normalization = 6;
    Postprocessing postprocessing = 7;
}


message Description {
    string language = 1;
    string speaker_sex = 2;
    string pipeline_owner = 3;
    string comments = 4;
    string speaker_name = 5;
    string domain = 6;
}

message Inference {
    string type = 1;
    CompositeInference composite_inference = 2;
    Caching caching = 3;
}

message CompositeInference {
    Text2Mel text2mel = 1;
    Mel2Audio mel2audio = 2;
}

message Text2Mel {
    string type = 1;
    GlowTTS glow_tts = 3;
    GlowTTSTriton glow_tts_triton = 4;
}

message GlowTTS {
    int64 batch_size = 1;
    bool use_gpu = 2;
    float length_scale = 3;
    float noise_scale = 4;
    string path = 5;
    repeated string cleaners = 6;
    string param_config_path = 7;
}

message GlowTTSTriton {
    int64 batch_size = 1;
    float length_scale = 2;
    float noise_scale = 3;
    repeated string cleaners = 4;
    int64 max_text_length = 5;
    string param_config_path = 6;
    string triton_url = 7;
    string triton_model_name = 8;
}

message Mel2Audio {
    string type = 1;
    MbMelganTriton mb_melgan_triton = 2;
    HiFiGan hifi_gan = 3;
    HiFiGanTriton hifi_gan_triton = 4;
}

message HiFiGan {
    bool use_gpu = 1;
    int64 batch_size = 2;
    string config_path = 3;
    string model_path = 4;
}

message HiFiGanTriton {
    string config_path = 1;
    string triton_model_name = 2;
    string triton_url = 3;
}

message MbMelganTriton {
    string config_path = 1;
    string stats_path = 2;
    string triton_model_name = 3;
    string triton_url = 4;
}

message Caching {
    bool active = 1;
    int64 memory_cache_max_size = 2;
    int64 sampling_rate = 3;
    bool load_cache = 4;
    bool save_cache = 5;
    string cache_save_dir = 6;
}

message Normalization {
    string language = 1;
    repeated string pipeline = 2;
    string custom_phonemizer_id = 3;
}

message Postprocessing {
    float silence_secs = 1;
    repeated string pipeline = 2;
    Logmnse logmmse = 3;
    Wiener wiener = 4;
    Apodization apodization = 5;
}

message Logmnse {
    int64 initial_noise = 1;
    int64 window_size = 2;
    float noise_threshold = 3;
}

message Wiener {
    int64 frame_len = 1;
    int64 lpc_order = 2;
    int64 iterations = 3;
    float alpha = 4;
    float thresh = 5;
}

message Apodization {
    float apodization_secs = 1;
}
